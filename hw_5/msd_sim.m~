% close out everything
clear; close; clc;

% add parent directory
addpath ./..
MassParams

% Create dynamics object
dynamics = MassDynamics(P);

% Create GUI object
mass = msd_gui;
% get handles to GUI
handles = guidata(mass);
ax = handles.axes1;
z_slider = handles.z_ref_slider;

% set slider values
set(z_slider,'Min',P.z_min,'Max',P.z_max,'Value',P.z_init);

% Create animation object
animation = MassAnimation(P,ax);

% Create controller
msd_controller = MSDController(P);
z = dynamics.output();

% Create I/O graph window
plt = DynamicPlotData(P);

% % create output
% plt = figure;
% response = subplot(2,1,1);
% title(response,'System Response');
% xlabel(response,'Time (sec)');
% ylabel(response,'Z Position (m)');
% 
% input = subplot(2,1,2);
% title(input,'System Input');
% xlabel(input,'Time (sec)');
% ylabel(input,'Force (N)');
% 
% set(response,'YLim',[0,P.z_max]);
% set(input,'YLim',[0,5]);
% 
% hold(response,'on');
% hold(input,'on');
% 
% t = P.t_start;

% Graphics loop
while isgraphics(mass)
    
    % get input values
    z_ref = get(z_slider,'Value');
    f = msd_controller.u(z_ref,z);
    
    % propagate dynamics
    dynamics.propagateDynamics(f);
    
    z = dynamics.output(); % update output
    animation.draw(z); % update animation
    
%     plot(response,t,z,'r.'); % plot output
%     plot(input,t,f,'b.'); % plot input force
    
%     t = t + P.Ts; % increment time
    plt.update(u,z);
    
    pause(P.Ts);
    
end